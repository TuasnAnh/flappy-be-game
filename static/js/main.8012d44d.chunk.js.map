{"version":3,"sources":["utils/coordUtils.js","screen/StartScreen.js","systems/BeeRenderSystem.js","systems/BeePhysicalSystem.js","systems/InputHandlerSystem.js","utils/createParallax.js","systems/BackGroundRenderSystem.js","systems/PipeSpawnSystem.js","systems/PipeRenderSystem..js","systems/GroundRenderSystem.js","systems/BeeCollidePipeSystem.js","systems/scoreCalcSystem.js","systems/DecoSpawnSystem.js","systems/DecoPositionSystem.js","systems/DecoRenderSystem.js","utils/glyphLayout.js","utils/loadFontFile.js","screen/EndScreen.js","systems/ScoreRenderSystem.js","screen/GameScreen.js","utils/createWorld.js","index.js"],"names":["checkPointInsideRect","point","verts","DEVICE_PIXEL_RATIO","x","y","minX","maxX","minY","maxY","createStartScreen","worldState","width","height","camera","inputHandler","batch","atlas","assets","colorFill","findRegion","logo","LOGO_WIDTH","LOGO_HEIGHT","button1","button2","B_WIDTH","B_HEIGHT","BUTTON_RECT","coord","touchedStart","addEventListener","gameState","getTouchedWorldCoord","update","delta","setProjection","combined","begin","setColor","draw","end","createBeeRenderSystem","beeState","beeInfos","GAP","whiteTex","setPosition","stateTime","animation","getKeyFrame","PlayMode","LOOP","rotation","createBeePhysicalSystem","groundY","speedX","speedY","yAcceleration","Math","max","rotateSpeedUp","rotateUp","min","rotateSpeedDown","rotateDown","falledDown","createInputHandlerSystem","init","speedUpY","extra","createParallax","tex","startX","startY","gapX","effected","texWidth","texHeight","regionHeight","regionWidth","animateX","tmpSpeedX","offsetX","createParallaxGroup","parallaxes","add","parallax","push","addAll","ps","p","createBackGroundRenderSystem","parallaxGroup","sky","tree","cotDien","house","cloud","bike1","bike2","skyPar","groundHEight","cloudPar","treePar","powerPolesPar","housePar","bike1Par","bike2Par","createPipeSpawnSystem","addToPipeList","pipeList","pipeInfos","restHeight","distanceHeight","height1","random","height2","distanceWidth","y1","y2","passed","i","length","splice","createPipeRenderSystem","pipeTex","PIPE_HEIGHT","signTex","SIGN_WIDTH","SIGN_HEIGHT","pipe","PI","createGroundRenderSystem","bottom_ground","ground","bottomGroundPar","groundPar","createBeeCollidePipeSystem","beeL","beeR","beeT","beeB","createScoreCaculateSystem","score","createDecoSpawnSystem","decoTex","widths","heights","decoList","type","createDecoPositionSystem","createDecoRenderSystem","deco","checkKerning","id1","id2","kerningsData","check","amount","kerning","first","second","GlyphLayour","pageImage","regions","keringsData","canvasWidth","addToCache","line","px","py","lineBreak","lineH","xAdvance","index","currChar","charCodeAt","preChar","key","findRegions","kerningAmount","cache","xoffset","scale","yoffset","xadvance","beforeDrawing","posX","posY","fontSize","CharSequence","preDraw","spaceXadvance","tmpLength","tmplist","char","maxSeq","newbase","baseLine","listCharSeq","trim","split","map","s","si","oriWidth","tmpRatio","fixedWidth","lineHeight","accumulate","tmpChar","j","key2","substring","id","positionBreak","lastBreakIndex","tmp","key3","getPositionBasedOnMode","lastLine","tmpXadvance","lastKey","oriHeight","align","setAlignMode","mode","setType","setLineHeight","setFixedGlyphWidth","fixedW","this","base","position","Vector2","newBase","AlignMode","TextType","concatAndResolveUrl","url","concat","url1","url2","url3","l","pop","join","gl","packFileUrl","textureOptions","a","fetch","then","res","text","packFileContent","pages","regionsData","lines","tmp_array","push_to_kerning","numOfPages","startPageLine","tuple","pageCounter","saveIndex","undefined","filter","item","parseInt","face","size","bold","italic","charset","unicode","stretchH","smooth","aa","padding","spacing","outline","scaleW","scaleH","num_of_pages","packed","alphaChnl","redChnl","greenChnl","blueChnl","page_id","file","left","top","page","region","id_page","loadTexture","texture","invTextWidth","invTextHeight","regionData","invTexWidth","invTexHeight","TextureRegion","getLineHeight","getPages","getRegions","setNewText","createEndScreen","Game","board","replayButton","BOARD_WIDTH","BOARD_HEIGHT","RB_WIDTH","RB_HEIGHT","RB_RECT","scoreText","font","state","setCurrentScreen","createGameScreen","createScoreRenderSystem","scoreTex","canvas","viewPort","createBatch","createViewportAwareInputHandler","beeRegion","cols","rows","cellWidth","cellHeight","splitTex","main","beeAnimation","createAnimation","BEE_WIDTH","BEE_HEIGHT","INITIAL_GAP","PIPE_WIDTH","world","systems","passiveSystems","addSystem","system","passive","runPassive","createWorld","startScreen","endScreen","destroy","cleanup","document","getElementById","infos","createViewport","getContext","getCamera","createWhiteTex","screen","currentScreen","loadAtlas","bgStart","loadFontFile","clearColor","clear","COLOR_BUFFER_BIT","loop","createGameLoop","setInterval","innerHTML","getFps"],"mappings":"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","file":"static/js/main.8012d44d.chunk.js","sourcesContent":["export const checkPointInsideRect = (point, verts, DEVICE_PIXEL_RATIO = 1) => {\r\n  const x = point.x * DEVICE_PIXEL_RATIO;\r\n  const y = point.y * DEVICE_PIXEL_RATIO;\r\n  const minX = verts[0];\r\n  const maxX = verts[0] + verts[2];\r\n  const minY = verts[1];\r\n  const maxY = verts[1] + verts[3];\r\n  if (x < minX || x > maxX || y < minY || y > maxY) return false;\r\n  return true;\r\n};\r\n","import { checkPointInsideRect } from \"../utils/coordUtils\";\r\n\r\nconst createStartScreen = (\r\n  worldState,\r\n  { width, height, camera, inputHandler, batch, assets }\r\n) => {\r\n  const atlas = assets.atlas;\r\n  const colorFill = atlas.findRegion(\"color_fill\", -1);\r\n  const logo = atlas.findRegion(\"banner\", -1);\r\n  const LOGO_WIDTH = width * 0.4;\r\n  const LOGO_HEIGHT = (LOGO_WIDTH * logo.height) / logo.width;\r\n  const button1 = atlas.findRegion(\"start_btn\", -1);\r\n  const button2 = atlas.findRegion(\"start_btn\", 2);\r\n  const B_WIDTH = width / 3;\r\n  const B_HEIGHT = (B_WIDTH * button1.height) / button1.width;\r\n\r\n  const BUTTON_RECT = [\r\n    width / 2 - B_WIDTH / 2,\r\n    (height * 1.65) / 3,\r\n    B_WIDTH,\r\n    B_HEIGHT,\r\n  ];\r\n\r\n  let coord = {};\r\n  let touchedStart = false;\r\n  inputHandler.addEventListener(\"touchStart\", () => {\r\n    if (worldState.gameState === 0) {\r\n      coord = {\r\n        x: inputHandler.getTouchedWorldCoord().x,\r\n        y: inputHandler.getTouchedWorldCoord().y,\r\n      };\r\n\r\n      if (checkPointInsideRect(coord, BUTTON_RECT)) {\r\n        touchedStart = true;\r\n      }\r\n    }\r\n  });\r\n\r\n  inputHandler.addEventListener(\"touchEnd\", () => {\r\n    if (worldState.gameState === 0) {\r\n      touchedStart = false;\r\n      coord = {\r\n        x: inputHandler.getTouchedWorldCoord().x,\r\n        y: inputHandler.getTouchedWorldCoord().y,\r\n      };\r\n\r\n      if (checkPointInsideRect(coord, BUTTON_RECT)) {\r\n        worldState.gameState = 1;\r\n      }\r\n    }\r\n  });\r\n\r\n  const update = (delta) => {\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 0.5);\r\n    colorFill.draw(batch, 0, 0, width, height);\r\n    batch.setColor(1, 1, 1, 1);\r\n    logo.draw(\r\n      batch,\r\n      width / 2 - LOGO_WIDTH / 2 - LOGO_WIDTH * 0.15,\r\n      (height * 1.1) / 3,\r\n      LOGO_WIDTH,\r\n      LOGO_HEIGHT\r\n    );\r\n\r\n    const buttonTex = touchedStart === true ? button2 : button1;\r\n    buttonTex.draw(\r\n      batch,\r\n      width / 2 - B_WIDTH / 2,\r\n      (height * 1.65) / 3,\r\n      B_WIDTH,\r\n      B_HEIGHT\r\n    );\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n  };\r\n};\r\n\r\nexport default createStartScreen;\r\n","// import { splitTexture } from \"gdxjs/lib/TextureRegion\";\r\nimport { PlayMode } from \"gdxjs/lib/createAnimation\";\r\nimport { createAnimation, TextureRegion, fillRect } from \"gdxjs\";\r\n\r\nconst createBeeRenderSystem = () => {\r\n  return {\r\n    update(\r\n      delta,\r\n      { beeState, beeInfos, GAP },\r\n      { batch, height, width, camera, whiteTex }\r\n    ) {\r\n      camera.setPosition(beeState.x - GAP, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n\r\n      beeState.stateTime += delta;\r\n\r\n      beeInfos.animation\r\n        .getKeyFrame(beeState.stateTime, PlayMode.LOOP)\r\n        .draw(\r\n          batch,\r\n          beeState.x,\r\n          beeState.y,\r\n          beeState.width,\r\n          beeState.height,\r\n          beeState.width / 2,\r\n          beeState.height / 2,\r\n          beeState.rotation\r\n        );\r\n\r\n      // fillRect(batch, whiteTex, beeState.x, beeState.y, BEE_WIDTH, BEE_HEIGHT);\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBeeRenderSystem;\r\n","const createBeePhysicalSystem = () => {\r\n  return {\r\n    update(delta, worldState, { width, height }) {\r\n      const { beeState, beeInfos, groundY } = worldState;\r\n\r\n      if (worldState.gameState === 1 || worldState.gameState === 2) {\r\n        beeState.x += delta * beeInfos.speedX;\r\n        beeState.y += delta * beeInfos.speedY;\r\n        beeInfos.speedY += beeInfos.yAcceleration * delta;\r\n\r\n        if (beeInfos.speedY < 0) {\r\n          beeState.rotation = Math.max(\r\n            (beeState.rotation -= beeInfos.rotateSpeedUp * delta),\r\n            beeInfos.rotateUp\r\n          );\r\n        } else {\r\n          beeState.rotation = Math.min(\r\n            (beeState.rotation += beeInfos.rotateSpeedDown * delta),\r\n            beeInfos.rotateDown\r\n          );\r\n        }\r\n\r\n        if (beeState.y > groundY - beeState.height) {\r\n          beeState.y = groundY - beeState.height;\r\n          if (worldState.gameState === 2) {\r\n            worldState.beeInfos.falledDown = true;\r\n          }\r\n        } else if (beeState.y < -height / 60) {\r\n          beeInfos.speedY = 0;\r\n          beeState.y = 0;\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\nexport default createBeePhysicalSystem;\r\n","const createInputHandlerSystem = () => {\r\n  return {\r\n    init(worldState, { width, height, inputHandler }) {\r\n      inputHandler.addEventListener(\"touchStart\", () => {\r\n        const { beeState, beeInfos } = worldState;\r\n        if (worldState.gameState === 1) {\r\n          beeInfos.speedY = beeInfos.speedUpY;\r\n        }\r\n        // }\r\n      });\r\n    },\r\n    update(delta, worldState, extra) {},\r\n  };\r\n};\r\n\r\nexport default createInputHandlerSystem;\r\n","import loadTexture from \"gdxjs/lib/loadTexture\";\r\n\r\nconst createParallax = (\r\n  tex,\r\n  width,\r\n  height,\r\n  startX,\r\n  startY,\r\n  speedX,\r\n  gapX = 0,\r\n  effected = true\r\n) => {\r\n  const texWidth = tex.width;\r\n  const texHeight = tex.height;\r\n  const regionHeight = height;\r\n  const regionWidth = (regionHeight / texHeight) * texWidth;\r\n  let animateX = 0;\r\n  let tmpSpeedX = speedX;\r\n\r\n  return {\r\n    update(delta, gameState) {\r\n      if ((gameState === 2 || gameState === 0) && effected) {\r\n        speedX = 0;\r\n      } else {\r\n        speedX = tmpSpeedX;\r\n      }\r\n      animateX -= speedX * delta;\r\n      while (animateX <= -(regionWidth + gapX)) {\r\n        animateX += regionWidth + gapX;\r\n      }\r\n    },\r\n    draw(batch) {\r\n      let offsetX = animateX;\r\n      while (offsetX < width) {\r\n        // batch.draw(tex, startX + offsetX, startY, regionWidth, regionHeight);\r\n        tex.draw(batch, startX + offsetX, startY, regionWidth, regionHeight);\r\n        offsetX += regionWidth + gapX;\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport const loadParallax = async (\r\n  gl,\r\n  url,\r\n  width,\r\n  height,\r\n  startX,\r\n  startY,\r\n  speedX\r\n) => {\r\n  const tex = await loadTexture(gl, url);\r\n  return createParallax(tex, width, height, startX, startY, speedX);\r\n};\r\n\r\nexport const createParallaxGroup = () => {\r\n  const parallaxes = [];\r\n\r\n  return {\r\n    add: (parallax) => parallaxes.push(parallax),\r\n    addAll: (...ps) => {\r\n      for (let p of ps) {\r\n        parallaxes.push(p);\r\n      }\r\n    },\r\n    update(delta, gameState) {\r\n      for (let parallax of parallaxes) {\r\n        parallax.update(delta, gameState);\r\n      }\r\n    },\r\n    draw(batch) {\r\n      for (let parallax of parallaxes) {\r\n        parallax.draw(batch);\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createParallax;\r\n","import createParallax, { createParallaxGroup } from \"../utils/createParallax\";\r\n\r\nconst createBackGroundRenderSystem = () => {\r\n  let parallaxGroup;\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const atlas = assets.atlas;\r\n      const sky = atlas.findRegion(\"bg\", -1);\r\n      const tree = atlas.findRegion(\"cay\", -1);\r\n      const cotDien = atlas.findRegion(\"cot_dien\");\r\n      const house = atlas.findRegion(\"house\", -1);\r\n      const cloud = atlas.findRegion(\"cloud\", -1);\r\n      // const bees1 = atlas.findRegion(\"dan_ong\", 1);\r\n      // const bees2 = atlas.findRegion(\"dan_ong\", 2);\r\n      const bike1 = atlas.findRegion(\"bike\", -1);\r\n      const bike2 = atlas.findRegion(\"bike2\", -1);\r\n\r\n      const groundY = worldState.groundY;\r\n      const skyPar = createParallax(\r\n        sky,\r\n        width,\r\n        height,\r\n        0,\r\n        -height / 7,\r\n        worldState.beeInfos.speedX,\r\n        -0.1\r\n      );\r\n\r\n      const groundHEight = height / 30;\r\n\r\n      const cloudPar = createParallax(\r\n        cloud,\r\n        width,\r\n        height / 4.4,\r\n        0,\r\n        groundY + groundHEight - height / 4.4,\r\n        worldState.beeInfos.speedX,\r\n        -0.1\r\n      );\r\n\r\n      const treePar = createParallax(\r\n        tree,\r\n        width,\r\n        height / 8.2,\r\n        0,\r\n        groundY + groundHEight - height / 7.5,\r\n        worldState.beeInfos.speedX,\r\n        -0.1\r\n      );\r\n\r\n      const powerPolesPar = createParallax(\r\n        cotDien,\r\n        width,\r\n        height / 4,\r\n        0,\r\n        groundY - height / 5.5,\r\n        worldState.beeInfos.speedX,\r\n        0\r\n      );\r\n\r\n      const housePar = createParallax(\r\n        house,\r\n        width,\r\n        height / 4.5,\r\n        0,\r\n        groundY - height / 6.5,\r\n        worldState.beeInfos.speedX,\r\n        0\r\n      );\r\n\r\n      const bike1Par = createParallax(\r\n        bike1,\r\n        width,\r\n        height / 12,\r\n        0,\r\n        groundY - height / 12,\r\n        worldState.beeInfos.speedX,\r\n        0,\r\n        false\r\n      );\r\n\r\n      const bike2Par = createParallax(\r\n        bike2,\r\n        width,\r\n        height / 12,\r\n        0,\r\n        groundY - height / 12,\r\n        worldState.beeInfos.speedX + width / 3,\r\n        0,\r\n        false\r\n      );\r\n\r\n      parallaxGroup = createParallaxGroup();\r\n      parallaxGroup.add(skyPar);\r\n      parallaxGroup.add(cloudPar);\r\n      parallaxGroup.add(housePar);\r\n      parallaxGroup.add(powerPolesPar);\r\n      parallaxGroup.add(treePar);\r\n      parallaxGroup.add(bike1Par);\r\n      parallaxGroup.add(bike2Par);\r\n    },\r\n    update(delta, worldState, { camera, width, height, batch }) {\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      parallaxGroup.update(delta, worldState.gameState);\r\n      parallaxGroup.draw(batch);\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBackGroundRenderSystem;\r\n","const createPipeSpawnSystem = () => {\r\n  const addToPipeList = (\r\n    pipeList,\r\n    pipeInfos,\r\n    beeState,\r\n    groundY,\r\n    height,\r\n    GAP\r\n  ) => {\r\n    // use distanceHeight to calc pipe1 and pipe2's height\r\n    const restHeight = height - (height - groundY) - pipeInfos.distanceHeight;\r\n    const raito = 1 / 5; // shortest pipe can be ( restHeight * ratio )\r\n    const height1 =\r\n      Math.random() * (restHeight * (1 - raito) - restHeight * raito) +\r\n      restHeight * raito;\r\n    const height2 = restHeight - height1;\r\n\r\n    pipeList.push({\r\n      x: beeState.x - GAP + pipeInfos.distanceWidth,\r\n      y1: 0,\r\n      y2: groundY,\r\n      width: pipeInfos.width,\r\n      height1,\r\n      height2,\r\n      passed: false,\r\n    });\r\n  };\r\n\r\n  return {\r\n    init({ pipeList, beeState, pipeInfos, groundY, GAP }, { height }) {\r\n      addToPipeList(pipeList, pipeInfos, beeState, groundY, height, GAP);\r\n    },\r\n    update(delta, { pipeList, beeState, pipeInfos, groundY, GAP }, { height }) {\r\n      for (let i = pipeList.length - 1; i >= 0; i--) {\r\n        // console.log(beeState.x, pipeList[i].x);\r\n        if (pipeList[i].x < beeState.x - GAP - pipeList[i].width) {\r\n          addToPipeList(pipeList, pipeInfos, beeState, groundY, height, GAP);\r\n          pipeList.splice(i, 1);\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createPipeSpawnSystem;\r\n","import { fillRect, loadTexture } from \"gdxjs\";\r\n\r\nconst createPipeRenderSystem = () => {\r\n  let pipeTex;\r\n  let PIPE_HEIGHT;\r\n  let signTex, SIGN_WIDTH, SIGN_HEIGHT;\r\n  return {\r\n    init({ pipeInfos }, { assets, width, height }) {\r\n      const atlas = assets.atlas;\r\n      signTex = atlas.findRegion(\"bee_sign\", -1);\r\n      pipeTex = atlas.findRegion(\"pipe\", -1);\r\n      PIPE_HEIGHT = (pipeInfos.width * pipeTex.height) / pipeTex.width;\r\n\r\n      SIGN_WIDTH = pipeInfos.width / 3;\r\n      SIGN_HEIGHT = (SIGN_WIDTH * signTex.height) / signTex.width;\r\n    },\r\n    update(\r\n      delta,\r\n      { pipeList, beeState, GAP },\r\n      { width, height, camera, batch, whiteTex }\r\n    ) {\r\n      camera.setPosition(beeState.x - GAP, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      for (let pipe of pipeList) {\r\n        // batch.draw(whiteTex, pipe.x, pipe.y1, pipe.width, pipe.height1);\r\n\r\n        pipeTex.draw(\r\n          batch,\r\n          pipe.x,\r\n          pipe.y1 + pipe.height1 - PIPE_HEIGHT,\r\n          pipe.width,\r\n          PIPE_HEIGHT,\r\n          pipe.width / 2,\r\n          PIPE_HEIGHT / 2,\r\n          Math.PI\r\n        );\r\n\r\n        pipeTex.draw(\r\n          batch,\r\n          pipe.x,\r\n          pipe.y2 - pipe.height2,\r\n          pipe.width,\r\n          PIPE_HEIGHT\r\n        );\r\n\r\n        signTex.draw(\r\n          batch,\r\n          pipe.x + pipe.width / 2 - SIGN_WIDTH / 2,\r\n          pipe.y2 - pipe.height2 + height / 17,\r\n          SIGN_WIDTH,\r\n          SIGN_HEIGHT\r\n        );\r\n      }\r\n\r\n      batch.setColor(1, 1, 1, 1);\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createPipeRenderSystem;\r\n","import createParallax, { createParallaxGroup } from \"../utils/createParallax\";\r\n\r\nconst createGroundRenderSystem = () => {\r\n  let parallaxGroup;\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const atlas = assets.atlas;\r\n      const bottom_ground = atlas.findRegion(\"bottom_ground\", -1);\r\n      const ground = atlas.findRegion(\"ground\", -1);\r\n\r\n      const groundY = worldState.groundY;\r\n      const groundHEight = height / 30;\r\n      const bottomGroundPar = createParallax(\r\n        bottom_ground,\r\n        width,\r\n        height / 8,\r\n        0,\r\n        groundY + groundHEight,\r\n        worldState.beeInfos.speedX,\r\n        -0.1\r\n      );\r\n\r\n      const groundPar = createParallax(\r\n        ground,\r\n        width,\r\n        groundHEight,\r\n        0,\r\n        groundY,\r\n        worldState.beeInfos.speedX,\r\n        -0.1\r\n      );\r\n\r\n      parallaxGroup = createParallaxGroup();\r\n      parallaxGroup.add(bottomGroundPar);\r\n      parallaxGroup.add(groundPar);\r\n    },\r\n    update(delta, worldState, { camera, width, height, batch }) {\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      parallaxGroup.update(delta, worldState.gameState);\r\n      parallaxGroup.draw(batch);\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createGroundRenderSystem;\r\n","import { fillRect } from \"gdxjs\";\r\n\r\nconst createBeeCollidePipeSystem = () => {\r\n  return {\r\n    update(delta, worldState, { batch, camera, whiteTex }) {\r\n      const { beeState, pipeList, beeInfos } = worldState;\r\n      const beeL = beeState.x + beeState.width / 2 - (beeState.width / 2) * 0.8;\r\n      const beeR = beeState.x + beeState.width / 2 + (beeState.width / 2) * 0.8;\r\n      const beeT = beeState.y;\r\n      const beeB = beeState.y + beeState.height;\r\n      // batch.setProjection(camera.combined);\r\n      // batch.begin();\r\n      // batch.setColor(1, 1, 1, 1);\r\n      for (let i = 0; i < pipeList.length; i++) {\r\n        const { x, y1, y2, width, height1, height2 } = pipeList[i];\r\n        const p1L = x;\r\n        const p1R = x + width;\r\n        const p1T = y1;\r\n        const p1B = y1 + height1;\r\n\r\n        const p2L = x;\r\n        const p2R = x + width;\r\n        const p2T = y2 - height2;\r\n        const p2B = y2;\r\n\r\n        // fillRect(batch, whiteTex, p1L, p1T, width, height1);\r\n        // fillRect(batch, whiteTex, p2L, p2T, width, height2);\r\n\r\n        if (\r\n          (beeL < p1R && beeR > p1L && beeT < p1B && beeB > p1T) ||\r\n          (beeL < p2R && beeR > p2L && beeT < p2B && beeB > p2T)\r\n        ) {\r\n          worldState.beeInfos.speedX = 0;\r\n          worldState.gameState = 2;\r\n        }\r\n      }\r\n      // batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBeeCollidePipeSystem;\r\n","const createScoreCaculateSystem = () => {\r\n  return {\r\n    update(delta, worldState, extra) {\r\n      const { pipeList, beeState } = worldState;\r\n      for (let i = 0; i < pipeList.length; i++) {\r\n        if (\r\n          pipeList[i].x + pipeList[i].width < beeState.x &&\r\n          !pipeList[i].passed &&\r\n          worldState.gameState === 1\r\n        ) {\r\n          pipeList[i].passed = true;\r\n          worldState.score += 1;\r\n          // console.log(worldState.score);\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createScoreCaculateSystem;\r\n","const createDecoSpawnSystem = () => {\r\n  let decoTex, widths, heights;\r\n\r\n  return {\r\n    init(worldState, { assets, width, height }) {\r\n      const atlas = assets.atlas;\r\n      decoTex = [\r\n        atlas.findRegion(\"dan_ong\", 1),\r\n        atlas.findRegion(\"dan_ong\", 2),\r\n      ];\r\n      widths = [width / 3, width / 6];\r\n      heights = [\r\n        (widths[0] * decoTex[0].height) / decoTex[0].width,\r\n        (widths[1] * decoTex[1].height) / decoTex[1].width,\r\n      ];\r\n    },\r\n    update(delta, { decoList, beeState }, { width, height }) {\r\n      if (Math.random() > 0.988) {\r\n        const type = Math.random() > 0.5 ? 1 : 0;\r\n        // console.log(Math.random() * (height / 2 - height / 5) + height / 5);\r\n        decoList.push({\r\n          tex: decoTex[type],\r\n          x: beeState.x + width,\r\n          y: Math.random() * (height / 2 - height / 7) + height / 7,\r\n          width: widths[type],\r\n          height: heights[type],\r\n          speedX: Math.random() * (width / 4 - width / 8) + width / 8,\r\n        });\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createDecoSpawnSystem;\r\n","const createDecoPositionSystem = () => {\r\n  return {\r\n    update(delta, { decoList, beeState, GAP }, extra) {\r\n      for (let i = decoList.length - 1; i >= 0; i--) {\r\n        decoList[i].x -= delta * decoList[i].speedX;\r\n\r\n        // console.log(decoList[i].x, decoList[i].speedX);\r\n        if (decoList[i].x + decoList[i].width < beeState.x - GAP) {\r\n          // console.log(\"vcl\");\r\n          decoList.splice(i, 1);\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createDecoPositionSystem;\r\n","const createDecoRenderSystem = () => {\r\n  return {\r\n    update(delta, { decoList, beeState, GAP }, { batch, camera }) {\r\n      camera.setPosition(beeState.x - GAP, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      for (let i = 0; i < decoList.length; i++) {\r\n        const deco = decoList[i];\r\n        // console.log(deco.x, deco.y, deco.width, deco.height);\r\n        decoList[i].tex.draw(batch, deco.x, deco.y, deco.width, deco.height);\r\n      }\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createDecoRenderSystem;\r\n","import { Vector2 } from \"gdxjs\";\r\n\r\nconst checkKerning = (id1, id2, kerningsData) => {\r\n  let check = false;\r\n  let amount = 0;\r\n  for (let kerning of kerningsData) {\r\n    if (kerning.first === id1 && kerning.second === id2) {\r\n      amount = kerning.amount;\r\n      check = true;\r\n      break;\r\n    } else {\r\n      check = false;\r\n    }\r\n  }\r\n  if (check) {\r\n    return amount;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nexport default class GlyphLayour {\r\n  constructor(pageImage, regions, keringsData, canvasWidth) {\r\n    this.pageImage = pageImage;\r\n    this.regions = regions;\r\n    this.kerningsData = keringsData;\r\n    this.canvasWidth = canvasWidth;\r\n    this.type = 0;\r\n    this.align = 2;\r\n    this.lineHeight = pageImage.lineHeight;\r\n    this.baseLine = pageImage.base;\r\n    this.fixedWidth = canvasWidth;\r\n    // temp variable\r\n    this.position = new Vector2(0, 0);\r\n    this.scale = 0;\r\n    this.newBase = 0;\r\n    this.oriWidth = 0;\r\n    this.oriHeight = 0;\r\n    this.positionBreak = []; // list of break-position's index\r\n    this.lastBreakIndex = 0;\r\n    // pre draw\r\n    this.cache = [];\r\n    this.preDraw = true;\r\n  }\r\n  addToCache = (line, px, py, lineBreak, lineH) => {\r\n    let xAdvance = 0;\r\n    for (let index = 0; index < line.length; index++) {\r\n      const currChar = line.charCodeAt(index);\r\n      const preChar = line.charCodeAt(index - 1);\r\n      let key = this.findRegions(currChar);\r\n      let kerningAmount = checkKerning(preChar, currChar, this.kerningsData);\r\n      // let kerningAmount = checkKerning(currChar, preChar, this.kerningsData);\r\n      this.cache.push({\r\n        key: key,\r\n        x:\r\n          px + xAdvance + key.xoffset * this.scale + kerningAmount * this.scale,\r\n        y: py + key.yoffset * this.scale + lineBreak * this.scale + lineH,\r\n        width: key.width * this.scale,\r\n        height: key.height * this.scale,\r\n      });\r\n      xAdvance += key.xadvance * this.scale;\r\n    }\r\n  };\r\n\r\n  beforeDrawing = (posX, posY, fontSize, CharSequence) => {\r\n    if (this.preDraw) {\r\n      let spaceXadvance = 0;\r\n      let tmpLength = 0;\r\n      let tmplist = [];\r\n      // find longest sequence\r\n      for (let i = 0; i < CharSequence.length; i++) {\r\n        const char = CharSequence.charCodeAt(i);\r\n        const key = this.findRegions(char);\r\n        if (char !== 32) {\r\n          tmpLength += key.xadvance * this.scale;\r\n        } else {\r\n          spaceXadvance = key.xadvance * this.scale;\r\n          tmplist.push(tmpLength);\r\n          tmpLength = 0;\r\n        }\r\n      }\r\n      let maxSeq = Math.max(...tmplist) + spaceXadvance;\r\n      //////////////////\r\n      this.newbase = fontSize;\r\n      this.scale = this.newbase / this.baseLine;\r\n      CharSequence = CharSequence.trim();\r\n\r\n      // split string between /n\r\n      let listCharSeq = CharSequence.split(\"/n\").map((s) => s.trim());\r\n      let lineH = 0;\r\n      for (let si = 0; si < listCharSeq.length; si++) {\r\n        CharSequence = listCharSeq[si];\r\n        // find new origin Width for each line\r\n        this.oriWidth = 0;\r\n        for (let i = 0; i < CharSequence.length; i++) {\r\n          const char = CharSequence.charCodeAt(i);\r\n          const preChar = CharSequence.charCodeAt(i - 1);\r\n          const key = this.findRegions(char);\r\n          let kerningAmount = checkKerning(preChar, char, this.kerningsData); // new\r\n          this.oriWidth += kerningAmount * this.scale; // new\r\n          if (i < CharSequence.length - 1) {\r\n            this.oriWidth += key.xadvance * this.scale;\r\n          } else {\r\n            this.oriWidth += key.xadvance * this.scale; // new\r\n          }\r\n        }\r\n        let tmpRatio = this.oriWidth / this.fixedWidth;\r\n        lineH = this.lineHeight * this.scale * si;\r\n        let accumulate = 0;\r\n        let tmpChar = \"\";\r\n        let lineBreak = 0;\r\n        // finding position break and length of each line\r\n        // only execute if oriWidth > fixedWidth and fixedWidth > longest seq\r\n        if (tmpRatio > 1 && this.fixedWidth > maxSeq) {\r\n          for (let i = 0; i < CharSequence.length; i++) {\r\n            tmpChar += CharSequence[i];\r\n            const char = CharSequence.charCodeAt(i);\r\n            const key = this.findRegions(char);\r\n            accumulate += key.xadvance * this.scale;\r\n            // every line before last line\r\n            if (accumulate >= this.fixedWidth) {\r\n              let j = i;\r\n              while (j >= 0) {\r\n                i--;\r\n                j--;\r\n                const key2 = this.findRegions(CharSequence.charCodeAt(i));\r\n                accumulate -= key2.xadvance * this.scale;\r\n                tmpChar = tmpChar.substring(0, tmpChar.length - 1);\r\n                if (accumulate <= this.fixedWidth && key2.id === 32) {\r\n                  lineBreak = this.lineHeight * this.positionBreak.length;\r\n                  this.positionBreak.push(i); ///\r\n                  this.lastBreakIndex = i;\r\n                  const line = tmpChar.trim();\r\n                  let tmp = 0;\r\n                  let key3 = 0;\r\n\r\n                  for (let index = 0; index < line.length; index++) {\r\n                    key3 = this.findRegions(line.charCodeAt(index));\r\n                    if (index === line.length - 1) {\r\n                      tmp += key3.width * this.scale;\r\n                    } else {\r\n                      tmp += key3.xadvance * this.scale;\r\n                    }\r\n                  }\r\n                  let [px, py] = this.getPositionBasedOnMode(posX, posY, tmp);\r\n\r\n                  this.addToCache(line, px, py, lineBreak, lineH);\r\n\r\n                  accumulate = 0;\r\n                  j = -1;\r\n                  tmpChar = \"\";\r\n                }\r\n              }\r\n            }\r\n            // last line\r\n            if (i === CharSequence.length - 1 && accumulate < this.oriWidth) {\r\n              let tmpChar = \"\";\r\n              for (let j = this.lastBreakIndex; j <= i; j++) {\r\n                tmpChar += CharSequence[j];\r\n              }\r\n              const lastLine = tmpChar.trim();\r\n              let tmpXadvance = 0;\r\n              let lastKey = 0;\r\n              for (let index = 0; index < lastLine.length; index++) {\r\n                lastKey = this.findRegions(lastLine.charCodeAt(index));\r\n                if (index === lastLine.length - 1) {\r\n                  tmpXadvance += lastKey.width * this.scale;\r\n                } else {\r\n                  tmpXadvance += lastKey.xadvance * this.scale;\r\n                }\r\n              }\r\n              let [px, py] = this.getPositionBasedOnMode(\r\n                posX,\r\n                posY,\r\n                tmpXadvance\r\n              );\r\n              lineBreak = this.lineHeight * this.positionBreak.length;\r\n              this.addToCache(lastLine, px, py, lineBreak, lineH);\r\n            }\r\n          }\r\n        }\r\n        // if originWidth < fixedWidth or fixedWidth < longest sequence\r\n        if (tmpRatio <= 1 || this.fixedWidth < maxSeq) {\r\n          let [px, py] = this.getPositionBasedOnMode(posX, posY, this.oriWidth);\r\n          this.addToCache(CharSequence, px, py, 0, lineH);\r\n        }\r\n      }\r\n      if (this.type === 0) {\r\n        this.preDraw = false;\r\n      }\r\n      this.oriHeight = this.newbase;\r\n    }\r\n  };\r\n\r\n  getPositionBasedOnMode = (posX, posY, oriWidth) => {\r\n    if (this.align === 0) {\r\n      // posY -= Math.round(this.oriHeight / 2);\r\n      posX -= oriWidth / 2;\r\n    } else if (this.align === 1) {\r\n      posX -= oriWidth;\r\n    }\r\n    return [posX, posY];\r\n  };\r\n\r\n  setAlignMode = (mode) => {\r\n    this.align = mode;\r\n  };\r\n\r\n  setType = (type) => {\r\n    this.type = type;\r\n  };\r\n\r\n  setLineHeight = (lineHeight) => {\r\n    this.lineHeight = lineHeight;\r\n  };\r\n\r\n  setFixedGlyphWidth = (fixedW) => {\r\n    this.fixedWidth = fixedW;\r\n    // this.fixedHeight = fixedH;\r\n  };\r\n\r\n  findRegions = (id) => {\r\n    for (let i = 0; i < this.regions.length; i++) {\r\n      if (this.regions[i].id === id) {\r\n        return this.regions[i];\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (batch, CharSequence = \"\", posX, posY, fontSize = this.baseLine) => {\r\n    if (this.type === 0) {\r\n      if (this.preDraw) {\r\n        this.beforeDrawing(posX, posY, fontSize, CharSequence);\r\n      }\r\n      for (let i = 0; i < this.cache.length; i++) {\r\n        let cache = this.cache[i];\r\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\r\n      }\r\n    }\r\n\r\n    if (this.type === 1) {\r\n      this.beforeDrawing(posX, posY, fontSize, CharSequence);\r\n      for (let i = 0; i < this.cache.length; i++) {\r\n        let cache = this.cache[i];\r\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\r\n      }\r\n      this.cache.length = 0;\r\n      this.positionBreak.length = 0;\r\n    }\r\n  };\r\n}\r\n","import { loadTexture, TextureRegion } from \"gdxjs\";\r\nimport GlyphLayour from \"./glyphLayout\";\r\n\r\nexport const AlignMode = {\r\n  center: 0,\r\n  right: 1,\r\n  left: 2,\r\n};\r\n\r\nexport const TextType = {\r\n  static: 0,\r\n  dynamic: 1,\r\n};\r\n\r\nfunction concatAndResolveUrl(url, concat) {\r\n  let url1 = url.split(\"/\");\r\n  let url2 = concat.split(\"/\");\r\n  let url3 = [];\r\n\r\n  for (let i = 0, l = url1.length; i < l; i++) {\r\n    if (url1[i] === \"..\") {\r\n      url3.pop();\r\n    } else if (url1[i] === \".\") {\r\n      continue;\r\n    } else {\r\n      url3.push(url1[i]);\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = url2.length; i < l; i++) {\r\n    if (url2[i] === \"..\") {\r\n      url3.pop();\r\n    } else if (url2[i] === \".\") {\r\n      continue;\r\n    } else {\r\n      url3.push(url2[i]);\r\n    }\r\n  }\r\n\r\n  return url3.join(\"/\");\r\n}\r\n\r\nexport default async (gl, packFileUrl, textureOptions) => {\r\n  const packFileContent = await fetch(packFileUrl).then((res) => res.text());\r\n  const pages = [];\r\n  const regionsData = [];\r\n  const kerningsData = [];\r\n  let pageImage = null;\r\n  const lines = packFileContent.split(\"\\n\");\r\n  let i = 0;\r\n  let tuple;\r\n  let tmp_array = [];\r\n  let push_to_kerning = false;\r\n\r\n  let numOfPages = 0;\r\n  let startPageLine = 2;\r\n  while (true) {\r\n    let line = lines[startPageLine];\r\n    tmp_array.length = 0;\r\n    tuple = line.split(\" \").map((s) => s.trim());\r\n    if (tuple[0] === \"page\") {\r\n      numOfPages += 1;\r\n    } else {\r\n      break;\r\n    }\r\n    startPageLine += 1;\r\n  }\r\n\r\n  let pageCounter = -1;\r\n  let saveIndex = 2 + numOfPages + 1; // index to start finding region data\r\n\r\n  while (true) {\r\n    let line = lines[i];\r\n\r\n    if (line === undefined) {\r\n      push_to_kerning = false;\r\n      break;\r\n    }\r\n\r\n    if (line.split(\" \").length === 2) {\r\n      const tmp = line.split(\" \");\r\n      if (tmp[0] === \"kernings\") {\r\n        push_to_kerning = true;\r\n      }\r\n      i++;\r\n      line = lines[i];\r\n    }\r\n\r\n    if (push_to_kerning && pageImage !== null) {\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      tuple = tuple.filter((item) => item !== \"\");\r\n      tmp_array.length = 0;\r\n\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const first = parseInt(tmp_array[0], 10);\r\n      const second = parseInt(tmp_array[1], 10);\r\n      const amount = parseInt(tmp_array[2], 10);\r\n      kerningsData.push({ first, second, amount });\r\n    }\r\n\r\n    if (pageImage === null) {\r\n      pageCounter += 1;\r\n\r\n      tmp_array.length = 0;\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const face = tmp_array[0];\r\n      const size = parseInt(tmp_array[1], 10);\r\n      const bold = parseInt(tmp_array[2], 10) === 0 ? false : true;\r\n      const italic = parseInt(tmp_array[3], 10) === 0 ? false : true;\r\n      const charset = tmp_array[4];\r\n      const unicode = parseInt(tmp_array[5], 10);\r\n      const stretchH = parseInt(tmp_array[6], 10); // percentage\r\n      const smooth = parseInt(tmp_array[7], 10);\r\n      const aa = parseInt(tmp_array[8], 10);\r\n      const padding = tmp_array[9].split(\",\").map((i) => parseInt(i, 10));\r\n      const spacing = tmp_array[10].split(\",\").map((i) => parseInt(i, 10));\r\n      const outline = parseInt(tmp_array[11], 10);\r\n\r\n      i++;\r\n      line = lines[i];\r\n      tmp_array.length = 0;\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const lineHeight = parseInt(tmp_array[0], 10);\r\n      const base = parseInt(tmp_array[1], 10);\r\n      const scaleW = parseInt(tmp_array[2], 10);\r\n      const scaleH = parseInt(tmp_array[3], 10);\r\n      const num_of_pages = parseInt(tmp_array[4], 10);\r\n      const packed = parseInt(tmp_array[5], 10);\r\n      const alphaChnl = parseInt(tmp_array[6], 10);\r\n      const redChnl = parseInt(tmp_array[7], 10);\r\n      const greenChnl = parseInt(tmp_array[8], 10);\r\n      const blueChnl = parseInt(tmp_array[9], 10);\r\n\r\n      i = i + pageCounter + 1;\r\n      line = lines[i];\r\n      tmp_array.length = 0;\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const page_id = parseInt(tmp_array[0], 10);\r\n      const url = tmp_array[1].split('\"');\r\n      const file = concatAndResolveUrl(packFileUrl, `../${url[1]}`);\r\n\r\n      pageImage = {\r\n        file,\r\n        page_id,\r\n        face,\r\n        size,\r\n        bold,\r\n        italic,\r\n        charset,\r\n        unicode,\r\n        stretchH,\r\n        smooth,\r\n        aa,\r\n        padding,\r\n        spacing,\r\n        outline,\r\n        lineHeight,\r\n        base,\r\n        scaleW,\r\n        scaleH,\r\n        num_of_pages,\r\n        packed,\r\n        alphaChnl,\r\n        redChnl,\r\n        greenChnl,\r\n        blueChnl,\r\n      };\r\n      pages.push(pageImage);\r\n\r\n      i = saveIndex;\r\n      line = lines[i];\r\n    }\r\n\r\n    if (!push_to_kerning && pageImage !== null) {\r\n      tuple = line.split(\" \").map((s) => s.trim());\r\n      tuple = tuple.filter((item) => item !== \"\");\r\n      tmp_array.length = 0;\r\n\r\n      for (let i = 1; i < tuple.length; i++) {\r\n        tmp_array.push(tuple[i].split(\"=\")[1]);\r\n      }\r\n      const id = parseInt(tmp_array[0], 10);\r\n      const left = parseInt(tmp_array[1], 10);\r\n      const top = parseInt(tmp_array[2], 10);\r\n      const width = parseInt(tmp_array[3], 10);\r\n      const height = parseInt(tmp_array[4], 10);\r\n      const xoffset = parseInt(tmp_array[5], 10);\r\n      const yoffset = parseInt(tmp_array[6], 10);\r\n      const xadvance = parseInt(tmp_array[7], 10);\r\n      const page = parseInt(tmp_array[8], 10);\r\n      const region = {\r\n        id,\r\n        left,\r\n        top,\r\n        width,\r\n        height,\r\n        xoffset,\r\n        yoffset,\r\n        xadvance,\r\n        page: pageImage,\r\n        id_page: page,\r\n      };\r\n\r\n      if (region.id_page === pageCounter) {\r\n        regionsData.push(region);\r\n      } else {\r\n        if (pageCounter === numOfPages - 1) {\r\n          push_to_kerning = true;\r\n        } else {\r\n          saveIndex = i;\r\n          i = -1;\r\n          pageImage = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    i++;\r\n  }\r\n\r\n  //   console.log(kerningsData);\r\n  //   console.log(pages);\r\n  //   console.log(regionsData);\r\n  for (let page of pages) {\r\n    page.texture = await loadTexture(gl, page.file, textureOptions);\r\n    page.invTextWidth = 1 / page.texture.width;\r\n    page.invTextHeight = 1 / page.texture.height;\r\n  }\r\n\r\n  const regions = [];\r\n\r\n  for (let regionData of regionsData) {\r\n    const left = regionData.left;\r\n    const top = regionData.top;\r\n    const width = regionData.width;\r\n    const height = regionData.height;\r\n    const { texture, invTexWidth, invTexHeight } = regionData.page;\r\n    regions.push(\r\n      new TextureRegion(\r\n        texture,\r\n        left,\r\n        top,\r\n        width,\r\n        height,\r\n        regionData,\r\n        invTexWidth,\r\n        invTexHeight\r\n      )\r\n    );\r\n  }\r\n\r\n  return {\r\n    getLineHeight() {\r\n      return pageImage.lineHeight;\r\n    },\r\n\r\n    getPages() {\r\n      return pages;\r\n    },\r\n\r\n    getRegions() {\r\n      return regions;\r\n    },\r\n\r\n    findRegions(id) {\r\n      for (let i = 0; i < regions.length; i++) {\r\n        if (regions[i].id === id) {\r\n          return regions[i];\r\n        }\r\n      }\r\n    },\r\n\r\n    setNewText(canvasWidth) {\r\n      return new GlyphLayour(pageImage, regions, kerningsData, canvasWidth);\r\n    },\r\n  };\r\n};\r\n","import createGameScreen from \"./GameScreen\";\r\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\r\nimport { AlignMode, TextType } from \"../utils/loadFontFile\";\r\n\r\nconst createEndScreen = (\r\n  worldState,\r\n  { width, height, camera, inputHandler, batch, assets },\r\n  Game\r\n) => {\r\n  const atlas = assets.atlas;\r\n  const board = atlas.findRegion(\"score_board\", -1);\r\n  const colorFill = atlas.findRegion(\"color_fill\", -1);\r\n  const replayButton = atlas.findRegion(\"replay_btn\", -1);\r\n  const logo = atlas.findRegion(\"banner\", -1);\r\n  const LOGO_WIDTH = width * 0.4;\r\n  const LOGO_HEIGHT = (LOGO_WIDTH * logo.height) / logo.width;\r\n\r\n  const BOARD_WIDTH = width / 1.8;\r\n  const BOARD_HEIGHT = (BOARD_WIDTH * board.height) / board.width;\r\n\r\n  const RB_WIDTH = width / 4.7;\r\n  const RB_HEIGHT = (RB_WIDTH * replayButton.height) / replayButton.width;\r\n\r\n  const RB_RECT = [\r\n    width / 2 - RB_WIDTH / 2,\r\n    (height * 1) / 1.65,\r\n    RB_WIDTH,\r\n    RB_HEIGHT,\r\n  ];\r\n\r\n  const font = Game.font;\r\n  const scoreText = font.setNewText(width);\r\n  scoreText.setAlignMode(AlignMode.center);\r\n\r\n  let fontSize = 0;\r\n  if (worldState.score < 1000) {\r\n    fontSize = height / 10;\r\n  } else if (worldState.score >= 1000 && worldState.score < 10000) {\r\n    fontSize = height / 13;\r\n  } else {\r\n    fontSize = height / 15;\r\n  }\r\n\r\n  let coord = {};\r\n  inputHandler.addEventListener(\"touchStart\", () => {\r\n    if (worldState.gameState === 2) {\r\n      coord = {\r\n        x: inputHandler.getTouchedWorldCoord().x,\r\n        y: inputHandler.getTouchedWorldCoord().y,\r\n      };\r\n\r\n      if (checkPointInsideRect(coord, RB_RECT)) {\r\n        Game.state = 0;\r\n        Game.setCurrentScreen(createGameScreen(Game));\r\n      }\r\n    }\r\n  });\r\n\r\n  const update = (delta) => {\r\n    camera.setPosition(0, 0);\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 0.5);\r\n    colorFill.draw(batch, 0, 0, width, height);\r\n    batch.setColor(1, 1, 1, 1);\r\n    logo.draw(\r\n      batch,\r\n      width / 2 - LOGO_WIDTH / 2 - LOGO_WIDTH * 0.15,\r\n      height / 5.5,\r\n      LOGO_WIDTH,\r\n      LOGO_HEIGHT\r\n    );\r\n\r\n    board.draw(\r\n      batch,\r\n      width / 2 - BOARD_WIDTH / 2,\r\n      height / 2.7,\r\n      BOARD_WIDTH,\r\n      BOARD_HEIGHT\r\n    );\r\n\r\n    scoreText.draw(\r\n      batch,\r\n      `${worldState.score}`,\r\n      width / 2,\r\n      height / 2.15,\r\n      fontSize\r\n    );\r\n\r\n    replayButton.draw(batch, RB_RECT[0], RB_RECT[1], RB_RECT[2], RB_RECT[3]);\r\n    batch.end();\r\n  };\r\n  return { update };\r\n};\r\n\r\nexport default createEndScreen;\r\n","import { AlignMode, TextType } from \"../utils/loadFontFile\";\r\n\r\nconst createScoreRenderSystem = () => {\r\n  let scoreTex;\r\n  return {\r\n    init(worldState, { width, font }) {\r\n      scoreTex = font.setNewText(width);\r\n      scoreTex.setAlignMode(AlignMode.center);\r\n      scoreTex.setType(TextType.dynamic);\r\n    },\r\n    update(delta, worldState, { batch, camera, width, height }) {\r\n      camera.setPosition(0, 0);\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      scoreTex.draw(\r\n        batch,\r\n        `${worldState.score}`,\r\n        width / 2,\r\n        height / 12,\r\n        height / 16\r\n      );\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createScoreRenderSystem;\r\n","import {\r\n  createBatch,\r\n  createViewport,\r\n  createViewportAwareInputHandler,\r\n  TextureRegion,\r\n  createAnimation,\r\n} from \"gdxjs\";\r\nimport createWorld from \"../utils/createWorld\";\r\nimport createBeeRenderSystem from \"../systems/BeeRenderSystem\";\r\nimport createBeePhysicalSystem from \"../systems/BeePhysicalSystem\";\r\nimport createInputHandlerSystem from \"../systems/InputHandlerSystem\";\r\nimport createBackGroundRenderSystem from \"../systems/BackGroundRenderSystem\";\r\nimport createPipeSpawnSystem from \"../systems/PipeSpawnSystem\";\r\nimport createPipeRenderSystem from \"../systems/PipeRenderSystem.\";\r\nimport createGroundRenderSystem from \"../systems/GroundRenderSystem\";\r\nimport createBeeCollidePipeSystem from \"../systems/BeeCollidePipeSystem\";\r\nimport createScoreCaculateSystem from \"../systems/scoreCalcSystem\";\r\nimport createDecoSpawnSystem from \"../systems/DecoSpawnSystem\";\r\nimport createDecoPositionSystem from \"../systems/DecoPositionSystem\";\r\nimport createDecoRenderSystem from \"../systems/DecoRenderSystem\";\r\nimport createStartScreen from \"../screen/StartScreen\";\r\nimport createEndScreen from \"../screen/EndScreen\";\r\nimport createScoreRenderSystem from \"../systems/ScoreRenderSystem\";\r\n\r\nconst splitTex = (tex, cols, rows) => {\r\n  const regions = [];\r\n  const cellWidth = tex.width / cols;\r\n  const cellHeight = tex.height / rows;\r\n  for (let x = 0; x < cols; x++) {\r\n    for (let y = 0; y < rows; y++) {\r\n      regions.push(\r\n        new TextureRegion(\r\n          tex,\r\n          cellWidth * x,\r\n          cellHeight * y,\r\n          cellWidth,\r\n          cellHeight\r\n        )\r\n      );\r\n    }\r\n  }\r\n  return regions;\r\n};\r\n\r\nconst createGameScreen = (Game) => {\r\n  const {\r\n    width,\r\n    height,\r\n    gl,\r\n    canvas,\r\n    viewPort,\r\n    whiteTex,\r\n    assets,\r\n    camera,\r\n    font,\r\n  } = Game;\r\n\r\n  const batch = createBatch(gl);\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewPort);\r\n\r\n  const beeTex = assets.main;\r\n  const beeRegion = splitTex(beeTex, 3, 1);\r\n  const beeAnimation = createAnimation(0.2, beeRegion);\r\n  const BEE_WIDTH = width / 7;\r\n  const BEE_HEIGHT = (BEE_WIDTH * beeRegion[0].height) / beeRegion[0].width;\r\n\r\n  const INITIAL_GAP = width / 7;\r\n  const PIPE_WIDTH = width / 4;\r\n\r\n  const worldState = {\r\n    gameState: Game.state,\r\n    // gameOver: false,\r\n    score: 0,\r\n    beeState: {\r\n      x: INITIAL_GAP,\r\n      y: height / 5,\r\n      width: BEE_WIDTH,\r\n      height: BEE_HEIGHT,\r\n      stateTime: 0,\r\n      rotation: 0,\r\n    },\r\n    beeInfos: {\r\n      falledDown: false,\r\n      animation: beeAnimation,\r\n      speedX: width,\r\n      speedY: 0,\r\n      speedUpY: -height * 0.9,\r\n      yAcceleration: height * 3,\r\n      rotateSpeedUp: Math.PI * 3,\r\n      rotateSpeedDown: Math.PI * 1.3,\r\n      rotateUp: -Math.PI / 4,\r\n      rotateDown: Math.PI / 2,\r\n    },\r\n    pipeInfos: {\r\n      width: PIPE_WIDTH,\r\n      distanceWidth: width,\r\n      distanceHeight: height / 4.8,\r\n    },\r\n    pipeList: [],\r\n    decoList: [],\r\n    groundY: height - height / 8 - height / 30,\r\n    GAP: INITIAL_GAP,\r\n  };\r\n  const extra = {\r\n    inputHandler,\r\n    width,\r\n    height,\r\n    gl,\r\n    canvas,\r\n    viewPort,\r\n    whiteTex,\r\n    assets,\r\n    camera,\r\n    batch,\r\n    font,\r\n  };\r\n\r\n  const world = createWorld(worldState, extra);\r\n  world.addSystem(createPipeSpawnSystem());\r\n  world.addSystem(createBeePhysicalSystem(), true);\r\n  world.addSystem(createInputHandlerSystem());\r\n  world.addSystem(createBeeCollidePipeSystem());\r\n  world.addSystem(createScoreCaculateSystem());\r\n  world.addSystem(createDecoSpawnSystem(), true);\r\n  world.addSystem(createDecoPositionSystem(), true);\r\n\r\n  world.addSystem(createBackGroundRenderSystem(), true);\r\n  world.addSystem(createDecoRenderSystem(), true);\r\n  world.addSystem(createPipeRenderSystem(), true);\r\n  world.addSystem(createGroundRenderSystem(), true);\r\n  world.addSystem(createBeeRenderSystem(), true);\r\n  world.addSystem(createScoreRenderSystem());\r\n\r\n  const startScreen = createStartScreen(worldState, extra, Game);\r\n  const endScreen = createEndScreen(worldState, extra, Game);\r\n\r\n  const update = (delta) => {\r\n    if (worldState.gameState === 2 || worldState.gameState === 0) {\r\n      world.update(delta, true);\r\n      if (worldState.gameState === 0) {\r\n        startScreen.update(delta);\r\n      } else if (worldState.gameState === 2 && worldState.beeInfos.falledDown) {\r\n        endScreen.update(delta);\r\n      }\r\n    } else if (worldState.gameState === 1) {\r\n      world.update(delta);\r\n    }\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createGameScreen;\r\n","export default (worldState, extra) => {\r\n  const systems = [];\r\n  const passiveSystems = [];\r\n  return {\r\n    addSystem(system, passive = false) {\r\n      system.init && system.init(worldState, extra);\r\n      if (passive) {\r\n        passiveSystems.push(system);\r\n        systems.push(system);\r\n      } else {\r\n        systems.push(system);\r\n      }\r\n    },\r\n    update(delta, runPassive = false) {\r\n      // for (let system of systems) {\r\n      //   system.update(delta, worldState, extra);\r\n      // }\r\n      if (runPassive) {\r\n        for (let system of passiveSystems) {\r\n          system.update(delta, worldState, extra);\r\n        }\r\n      } else {\r\n        for (let system of systems) {\r\n          system.update(delta, worldState, extra);\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n","import \"./index.css\";\nimport { createViewport, createGameLoop, loadAtlas, loadTexture } from \"gdxjs\";\nimport createWhiteTex from \"gl-white-texture\";\nimport createStartScreenSystem from \"./screen/StartScreen\";\nimport createGameScreen from \"./screen/GameScreen\";\nimport loadFontFile from \"./utils/loadFontFile\";\n\nconst init = async () => {\n  const canvas = document.getElementById(\"main\");\n  const infos = document.getElementById(\"infos\");\n  const [width, height] = [47, 100];\n\n  const viewPort = createViewport(canvas, width, height);\n  const gl = viewPort.getContext();\n  const camera = viewPort.getCamera();\n  const whiteTex = createWhiteTex(gl);\n\n  /* gameState \n  0: start screen\n  1: game screen\n  2: end screen\n  */\n  const Game = {\n    state: 0,\n    gl,\n    width,\n    height,\n    canvas,\n    viewPort,\n    camera,\n    whiteTex,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n      Game.currentScreen = screen;\n    },\n  };\n\n  const atlas = await loadAtlas(gl, \"./assets/bee.atlas\");\n  const sky = await loadTexture(gl, \"./assets/sky.png\");\n  const bgStart = await loadTexture(gl, \"./assets/bg-start.jpg\");\n  const main = await loadTexture(gl, \"./assets/main.png\");\n\n  Game.assets = { atlas, sky, bgStart, main };\n\n  const font = await loadFontFile(gl, \"./fonts/mono.fnt\");\n  Game.font = font;\n  Game.setCurrentScreen(createGameScreen(Game));\n\n  gl.clearColor(1, 1, 1, 1);\n  const update = (delta) => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    Game.currentScreen.update(delta);\n  };\n\n  const loop = createGameLoop(update);\n\n  setInterval(() => {\n    infos.innerHTML = loop.getFps();\n  }, 1000);\n};\n\ninit();\n"],"sourceRoot":""}